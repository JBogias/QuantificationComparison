.default = group)) %>%
ggplot(aes(x = exp_group,
y = cpm(counts, log = TRUE),
colour = exp_group)) +
#geom_boxplot(colour = "black", outlier.shape = NA) +
geom_quasirandom(size = 3) +
scale_fill_manual(values = c("royalblue", "darkorange")) +
scale_colour_manual(values = c("royalblue", "darkorange")) +
scale_y_continuous(limits = c(0, 17)) +
facet_grid(~ group) +
labs(x = "",
y = "Transcript Expression (log2 CPM)",
fill = "Experimental\nGroup") +
ggtitle(tx_name) +
theme_bw() +
theme(axis.title = element_text(colour = "black", size = 14),
axis.text.y = element_text(colour = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 14, colour = "black"),
strip.background = element_rect(fill = "lightblue"),
plot.title = element_text(colour = "black", size = 18),
legend.position = "none")
# legend.title = element_text(colour = "black", size = 14,
#                             face = "bold"),
# legend.text = element_text(colour = "black", size = 12))
pcbp2_multimapping <- multimap_df %>%
dplyr::mutate(group = str_to_title(group),
group = case_when(group == "Star" ~ "STAR",
group == "Hisat" ~ "HISAT2",
.default = group)) %>%
dplyr::filter(transcript_id == tx) %>%
dplyr::select(transcript_id, percent_est_from_multimap,
exp_group, group) %>%
rbind(c("ENST00000437231", -0.05, "Control", "Kallisto")) %>%
mutate(
percent_est_from_multimap = as.numeric(percent_est_from_multimap)
) %>%
ggplot(aes(x = exp_group, y = 100*percent_est_from_multimap,
colour = exp_group)) +
geom_quasirandom(size = 3) +
scale_y_continuous(limits = c(0, 100)) +
scale_colour_manual(values = c("royalblue", "darkorange")) +
facet_grid(~ group) +
labs(x = "",
y = "Multimapped Counts (% of total)",
colour = "Experimental\nGroup") +
theme_bw() +
theme(axis.title = element_text(colour = "black", size = 14),
axis.text.y = element_text(colour = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 14, colour = "black"),
strip.background = element_rect(fill = "lightblue"),
legend.title = element_text(colour = "black", size = 14,
face = "bold"),
legend.text = element_text(colour = "black", size = 12),
legend.position = "right")
pcbp2_legend <- cowplot::get_legend(pcbp2_multimapping)
pcbp2_cowplot <- cowplot::plot_grid(pcbp2_plot,
pcbp2_multimapping +
theme(legend.position = "none"),
ncol = 1)
pcbp2_cowplot_legend <- cowplot::plot_grid(pcbp2_cowplot,
pcbp2_legend,
nrow = 1,
rel_widths = c(1, 0.13))
ggsave(plot = pcbp2_cowplot_legend,
filename = paste0(tx_name, "_cowplot.png"),
path = here("figures/pcbp2_plots/cowplots_with_kallisto/"),
device = "png",
height = 225,
width = 275,
units = "mm",
dpi = 400,
create.dir = TRUE)
}
pcbp2_cowplot_legend
# Chunk 18
tx_ids <- pcbp2_df$transcript_id %>% unique()
pcbp2_df_nokal <- pcbp2_df %>%
dplyr::filter(!group == "kallisto")
for(tx in tx_ids) {
tx_name <- pcbp2_df_nokal %>%
dplyr::filter(transcript_id == tx) %>%
dplyr::select(transcript_name) %>%
unique() %>%
as.character()
pcbp2_plot <- pcbp2_df_nokal %>%
dplyr::filter(transcript_id == tx) %>%
mutate(group = str_to_title(group),
group = case_when(group == "Star" ~ "STAR",
.default = group)) %>%
ggplot(aes(x = transcript_id, y = log2(counts), fill = exp_group)) +
#geom_boxplot(colour = "black", outlier.shape = NA) +
geom_quasirandom(aes(x = exp_group, y = log2(counts),
colour = exp_group), size = 3) +
scale_fill_manual(values = c("royalblue", "darkorange")) +
scale_colour_manual(values = c("royalblue", "darkorange")) +
scale_y_continuous(limits = c(-17, 15)) +
facet_grid(~ group) +
labs(x = "",
y = "Transcript Expression",
fill = "Experimental\nGroup") +
ggtitle(tx_name) +
theme_bw() +
theme(axis.title = element_text(colour = "black", size = 14),
axis.text.y = element_text(colour = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 14, colour = "black"),
strip.background = element_rect(fill = "lightblue"),
legend.position = "none")
# legend.title = element_text(colour = "black", size = 14,
#                             face = "bold"),
# legend.text = element_text(colour = "black", size = 12))
pcbp2_multimapping <- multimap_df %>%
dplyr::mutate(group = str_to_title(group),
group = case_when(group == "Star" ~ "STAR",
.default = group)) %>%
dplyr::filter(transcript_id == tx) %>%
ggplot(aes(x = transcript_id, y = percent_est_from_multimap,
fill = exp_group)) +
#geom_boxplot(colour = "black", outlier.shape = NA) +
geom_quasirandom(aes(x = exp_group, y = percent_est_from_multimap,
colour = exp_group), size = 3) +
scale_y_continuous(limits = c(0, 1)) +
scale_fill_manual(values = c("royalblue", "darkorange")) +
scale_colour_manual(values = c("royalblue", "darkorange")) +
facet_grid(~ group) +
#ggtitle(tx_name) +
labs(x = "",
y = "Multimapped Counts (% of total)",
fill = "Experimental\nGroup") +
theme_bw() +
theme(axis.title = element_text(colour = "black", size = 14),
axis.text.y = element_text(colour = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 14, colour = "black"),
strip.background = element_rect(fill = "lightblue"),
legend.title = element_text(colour = "black", size = 14,
face = "bold"),
legend.text = element_text(colour = "black", size = 12))
pcbp2_legend <- cowplot::get_legend(pcbp2_multimapping)
pcbp2_cowplot <- cowplot::plot_grid(pcbp2_plot,
pcbp2_multimapping +
theme(legend.position = "none"),
ncol = 1)
pcbp2_cowplot_legend <- cowplot::plot_grid(pcbp2_cowplot,
pcbp2_legend,
nrow = 1,
rel_widths = c(1, 0.13))
ggsave(plot = pcbp2_cowplot_legend,
filename = paste0(tx_name, "_cowplot.png"),
path = here("figures_withSTAR/pcbp2_plots/cowplots/"),
device = "png",
height = 225,
width = 275,
units = "mm",
dpi = 400,
create.dir = TRUE)
}
# Chunk 19
salmon_mm <- multimap_df %>%
dplyr::filter(group == "Salmon") %>%
dplyr::select(transcript_id,
ID,
"salmon_ambig" = AmbigCount,
"salmon_multimap" = multimap,
"salmon_percent_multi" = percent_est_from_multimap)
star_mm <- multimap_df %>%
dplyr::filter(group == "STAR") %>%
dplyr::select(transcript_id,
ID,
"star_ambig" = AmbigCount,
"star_multimap" = multimap,
"star_percent_multi" = percent_est_from_multimap)
sal_star_mm <- left_join(salmon_mm, star_mm, by = c("transcript_id", "ID"))
sal_star_ambig <- sal_star_mm %>%
ggplot(aes(x = salmon_ambig, y = star_ambig)) +
geom_point() +
geom_smooth() +
facet_wrap(~ ID, ncol = 3) +
labs(x = "Salmon Ambiguous Counts",
y = "STAR Ambiguous Counts") +
theme_bw() +
theme(axis.text = element_text(colour = "black"),
strip.background = element_rect(fill = "lightblue"))
ggsave(plot = sal_star_ambig,
filename = "salmon_star_ambig.png",
path = here("figures_withSTAR/multi_map/salmon_star_comparison/"),
device = "png",
height = 200,
width = 200,
units = "mm",
dpi = 400,
create.dir = TRUE)
sal_star_ambig
# Chunk 20
sal_star_multimap <- sal_star_mm %>%
ggplot(aes(x = salmon_multimap, y = star_multimap)) +
geom_point() +
geom_smooth() +
facet_wrap(~ ID, ncol = 3) +
labs(x = "Salmon Multimapping Counts",
y = "STAR Multimapping Counts") +
theme_bw() +
theme(axis.text = element_text(colour = "black"),
strip.background = element_rect(fill = "lightblue"))
ggsave(plot = sal_star_multimap,
filename = "salmon_star_multimap.png",
path = here("figures_withSTAR/multi_map/salmon_star_comparison/"),
device = "png",
height = 200,
width = 200,
units = "mm",
dpi = 400,
create.dir = TRUE)
sal_star_multimap
# Chunk 21
sal_star_percent <- sal_star_mm %>%
ggplot(aes(x = salmon_percent_multi, y = star_percent_multi)) +
geom_point() +
geom_smooth() +
facet_wrap(~ ID, ncol = 3) +
labs(x = "Salmon Multimapping Counts (% of total counts)",
y = "SA Multimapping Counts (% of total counts)") +
theme_bw() +
theme(axis.text = element_text(colour = "black"),
strip.background = element_rect(fill = "lightblue"))
ggsave(plot = sal_star_percent,
filename = "salmon_star_percent.png",
path = here("figures_withSTAR/multi_map/salmon_star_comparison/"),
device = "png",
height = 200,
width = 200,
units = "mm",
dpi = 400,
create.dir = TRUE)
sal_star_percent
# Chunk 22
hisat2_lmfit <- hisat2_dtelist %>%
de_lmfit()
kallisto_lmfit <- kallisto_dtelist %>%
de_lmfit()
salmon_lmfit <- salmon_dtelist %>%
de_lmfit()
star_lmfit <- star_dtelist %>%
de_lmfit()
# Chunk 23
pcbp2_ids <- transcript_key %>%
dplyr::filter(str_detect(transcript_name, "PCBP2-2"))
pcbp2_counts <- full_join(cpm(hisat2_dtelist, log = TRUE) %>%
set_colnames(paste0("HISAT2_", colnames(hisat2_dtelist))) %>%
as.data.frame() %>%
rownames_to_column("transcript_id") %>%
dplyr::filter(transcript_id %in% pcbp2_ids$transcript_id),
cpm(kallisto_dtelist, log = TRUE) %>%
set_colnames(paste0("Kallisto_", colnames(kallisto_dtelist))) %>%
as.data.frame() %>%
rownames_to_column("transcript_id") %>%
dplyr::filter(transcript_id %in% pcbp2_ids$transcript_id),
by = "transcript_id") %>%
full_join(cpm(salmon_dtelist, log = TRUE) %>%
set_colnames(paste0("Salmon_", colnames(salmon_dtelist))) %>%
as.data.frame() %>%
rownames_to_column("transcript_id") %>%
dplyr::filter(transcript_id %in% pcbp2_ids$transcript_id),
by = "transcript_id") %>%
full_join(cpm(star_dtelist, log = TRUE) %>%
set_colnames(paste0("STAR_", colnames(star_dtelist))) %>%
as.data.frame() %>%
rownames_to_column("transcript_id") %>%
dplyr::filter(transcript_id %in% pcbp2_ids$transcript_id),
by = "transcript_id")
pcbp2_counts[is.na(pcbp2_counts)] <- 0
column_order <- c("HISAT2_SRR13401120", "HISAT2_SRR13401121",
"HISAT2_SRR13401122", "HISAT2_SRR13401123",
"Kallisto_SRR13401120", "Kallisto_SRR13401121",
"Kallisto_SRR13401122", "Kallisto_SRR13401123",
"Salmon_SRR13401120", "Salmon_SRR13401121",
"Salmon_SRR13401122", "Salmon_SRR13401123",
"STAR_SRR13401120", "STAR_SRR13401121",
"STAR_SRR13401122", "STAR_SRR13401123",
"HISAT2_SRR13401116", "HISAT2_SRR13401117",
"HISAT2_SRR13401118", "HISAT2_SRR13401119",
"Kallisto_SRR13401116", "Kallisto_SRR13401117",
"Kallisto_SRR13401118", "Kallisto_SRR13401119",
"Salmon_SRR13401116", "Salmon_SRR13401117",
"Salmon_SRR13401118", "Salmon_SRR13401119",
"STAR_SRR13401116", "STAR_SRR13401117",
"STAR_SRR13401118", "STAR_SRR13401119")
pcbp2_mat <- pcbp2_counts %>%
left_join(transcript_key,
by = "transcript_id") %>%
dplyr::select(-transcript_id) %>%
column_to_rownames("transcript_name") %>%
as.matrix()
col_anno <- rep(c("Control", "Knockout"), c(16, 16)) %>%
as.data.frame() %>%
set_rownames(column_order) %>%
set_colnames("Group") %>%
mutate(Method = rep(
c(
rep("HISAT2", 4),
rep("Kallisto", 4),
rep("Salmon", 4),
rep("STAR", 4)
), 2))
hisat2_anno <- hisat2_lmfit %>%
dplyr::filter(str_detect(transcript_name, "PCBP2-2")) %>%
dplyr::select(transcript_name, DE) %>%
as.data.frame() %>%
mutate(HISAT2 = case_when(
DE == TRUE ~ "Significant",
DE == FALSE ~ "Non-Significant"
)) %>%
dplyr::select(transcript_name, HISAT2)
kallisto_anno <- kallisto_lmfit %>%
dplyr::filter(str_detect(transcript_name, "PCBP2-2")) %>%
dplyr::select(transcript_name, DE) %>%
as.data.frame() %>%
mutate(Kallisto = case_when(
DE == TRUE ~ "Significant",
DE == FALSE ~ "Non-Significant"
)) %>%
dplyr::select(transcript_name, Kallisto)
row_anno <- full_join(hisat2_anno, kallisto_anno, by = "transcript_name")
salmon_anno <- salmon_lmfit %>%
dplyr::filter(str_detect(transcript_name, "PCBP2-2")) %>%
dplyr::select(transcript_name, DE) %>%
as.data.frame() %>%
mutate(Salmon = case_when(
DE == TRUE ~ "Significant",
DE == FALSE ~ "Non-Significant"
)) %>%
dplyr::select(transcript_name, Salmon)
row_anno <- full_join(row_anno, salmon_anno, by = "transcript_name")
star_anno <- star_lmfit %>%
dplyr::filter(str_detect(transcript_name, "PCBP2-2")) %>%
dplyr::select(transcript_name, DE) %>%
as.data.frame() %>%
mutate(STAR = case_when(
DE == TRUE ~ "Significant",
DE == FALSE ~ "Non-Significant"
)) %>%
dplyr::select(transcript_name, STAR)
row_anno <- full_join(row_anno, star_anno, by = "transcript_name")
row_anno[is.na(row_anno)] <- "Non-Significant"
row_anno <- row_anno %>%
column_to_rownames("transcript_name")
ann_colours <- list(Group = c(Control = "darkblue",
Knockout = "orange"),
Method = c(HISAT2 = "black",
Kallisto = "brown",
Salmon = "salmon",
STAR = "pink"),
STAR = c(`Non-Significant` = "red",
Significant = "green"),
Salmon = c(`Non-Significant` = "red",
Significant = "green"),
HISAT2 = c(`Non-Significant` = "red",
Significant = "green"),
Kallisto = c(`Non-Significant` = "red",
Significant = "green"))
pcbp2_mat[, column_order] %>%
pheatmap(border_color = NA,
cluster_rows = TRUE,
cluster_cols = FALSE,
gaps_col = 16,
annotation_col = col_anno,
annotation_colors = ann_colours,
show_colnames = FALSE)
# Use grid.ls(grid.force()) to break the heatmap up into grid elements
# Then steadily turn each element white as you go along until you get the desired layout, using grid.gedit("GRID.text.13423", gp = gpar(col = "white"))
# Chunk 24
pcbp2_df <- pcbp2_mat %>%
as.data.frame() %>%
rownames_to_column("transcript_name") %>%
pivot_longer(cols = !starts_with("t"),
names_to = "ID",
values_to = "logCPM") %>%
dplyr::mutate("sample_id" = str_remove(ID, ".*_"),
"Method" = str_remove(ID, "_.*")) %>%
left_join(dplyr::select(hisat2_dtelist$samples,
"sample_id" = "ID", "Group" = "group"),
by = "sample_id") %>%
dplyr::mutate(Group = str_to_title(Group),
sample_id = factor(sample_id,
levels = c("SRR13401120", "SRR13401121",
"SRR13401122", "SRR13401123",
"SRR13401116", "SRR13401117",
"SRR13401118",
"SRR13401119")))
for(i in unique(pcbp2_df$transcript_name)) {
pcbp2_plot <- pcbp2_df %>%
dplyr::filter(transcript_name == i) %>%
ggplot(aes(x = sample_id, y = logCPM, colour = Group)) +
geom_point(size = 3) +
labs(x = "",
y = "Transcript Expression (log2 CPM)") +
scale_colour_manual(values = c("darkblue", "orange")) +
ggtitle(i) +
facet_wrap(~ Method, nrow = 1, ncol = 4) +
labs(x = "",
y = "Transcript Expression (log2 CPM)") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(colour = "black", size = 12),
axis.ticks.x = element_blank(),
axis.title.y = element_text(colour = "black", size = 14),
strip.background = element_rect(fill = "lightblue"),
strip.text = element_text(colour = "black", size = 14),
legend.title = element_text(colour = "black", size = 14),
legend.text = element_text(colour = "black", size = 12),
plot.title = element_text(colour = "black", size = 14,
face = "bold"))
ggsave(plot = pcbp2_plot,
filename = paste0(i, "_log2_cpm.png"),
path = here("figures_withSTAR/pcbp2_plots/logcpm_counts/"),
device = "png",
height = 150,
width = 200,
units = "mm",
dpi = 400,
create.dir = TRUE)
}
pcbp2_plot
# Chunk 25
for(tx in unique(pcbp2_df$transcript_name)) {
pcbp2_plot <- pcbp2_df %>%
dplyr::filter(transcript_name == tx) %>%
ggplot(aes(x = sample_id, y = logCPM, colour = Group)) +
geom_point(size = 3) +
labs(x = "",
y = "Transcript Expression (log2 CPM)") +
scale_colour_manual(values = c("darkblue", "orange")) +
ggtitle(tx) +
facet_wrap(~ Method, nrow = 1, ncol = 4) +
labs(x = "",
y = "Transcript Expression (log2 CPM)") +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(colour = "black", size = 12),
axis.ticks.x = element_blank(),
axis.title.y = element_text(colour = "black", size = 14),
strip.background = element_rect(fill = "lightblue"),
strip.text = element_text(colour = "black", size = 14),
legend.title = element_text(colour = "black", size = 14),
legend.text = element_text(colour = "black", size = 12),
plot.title = element_text(colour = "black", size = 14,
face = "bold"),
legend.position = "none")
pcbp2_multimapping <- multimap_df %>%
dplyr::mutate(group = str_to_title(group),
group = case_when(group == "Star" ~ "STAR",
.default = group)) %>%
dplyr::filter(transcript_name == tx) %>%
dplyr::select(transcript_name, percent_est_from_multimap,
exp_group, group) %>%
rbind(c("PCBP2-203", -0.05, "Control", "Kallisto")) %>%
mutate(
percent_est_from_multimap = as.numeric(percent_est_from_multimap)
) %>%
ggplot(aes(x = exp_group, y = 100*percent_est_from_multimap,
colour = exp_group)) +
geom_quasirandom(size = 3) +
scale_y_continuous(limits = c(0, 100)) +
scale_colour_manual(values = c("darkblue", "darkorange")) +
facet_grid(~ group) +
labs(x = "",
y = "Multimapped Counts (% of total)",
colour = "Experimental\nGroup") +
theme_bw() +
theme(axis.title = element_text(colour = "black", size = 14),
axis.text.y = element_text(colour = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 14, colour = "black"),
strip.background = element_rect(fill = "lightblue"),
legend.title = element_text(colour = "black", size = 14,
face = "bold"),
legend.text = element_text(colour = "black", size = 12),
legend.position = "right")
pcbp2_legend <- cowplot::get_legend(pcbp2_multimapping)
blanc <- ggplot() +
geom_blank() +
theme_void()
pcbp2_cowplot_a <- cowplot::plot_grid(blanc,
pcbp2_plot,
ncol = 2,
rel_widths = c(0.025, 1))
pcbp2_cowplot_adjust <- cowplot::plot_grid(pcbp2_cowplot_a,
pcbp2_multimapping +
theme(legend.position = "none"),
nrow = 2)
pcbp2_cowplot_legend <- cowplot::plot_grid(pcbp2_cowplot_adjust,
pcbp2_legend,
nrow = 1,
rel_widths = c(1, 0.13))
ggsave(plot = pcbp2_cowplot_legend,
filename = paste0(tx, "_logcpm_cowplot.png"),
path = here("figures_withSTAR/pcbp2_plots/cowplots_logcpm/"),
device = "png",
height = 225,
width = 275,
units = "mm",
dpi = 400,
create.dir = TRUE)
}
pcbp2_cowplot_legend
